#include "CaptureBMP.h"
#include "Video.h"
#include "FileUtils.h"
#include "messages.h"
#include "stdio.h"

#include "esp_vfs.h"

// custom header for 8 bit indexed BMP with adapted palette
// which requires no translation between framebuffer values and indices
#define BMP_HEADER_SIZE 1078
static unsigned char bmp_header[BMP_HEADER_SIZE] = {
    0x42,0x4d,0x36,0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x36,0x04,0x00,0x00,0x28,0x00,
    0x00,0x00,0xaa,0xaa,0xaa,0xaa,0xbb,0xbb,0xbb,0xbb,0x01,0x00,0x08,0x00,0x00,0x00,
    0x00,0x00,0xcc,0xcc,0xcc,0xcc,0x23,0x2e,0x00,0x00,0x23,0x2e,0x00,0x00,0x00,0x01,
    0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x00,0x00,0x00,
    0xbf,0x00,0x00,0x00,0xff,0x00,0x00,0x7f,0x00,0x00,0x00,0x7f,0x7f,0x00,0x00,0x7f,
    0xbf,0x00,0x00,0x7f,0xff,0x00,0x00,0xbf,0x00,0x00,0x00,0xbf,0x7f,0x00,0x00,0xbf,
    0xbf,0x00,0x00,0xbf,0xff,0x00,0x00,0xff,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0xff,
    0xbf,0x00,0x00,0xff,0xff,0x00,0x7f,0x00,0x00,0x00,0x7f,0x00,0x7f,0x00,0x7f,0x00,
    0xbf,0x00,0x7f,0x00,0xff,0x00,0x7f,0x7f,0x00,0x00,0x7f,0x7f,0x7f,0x00,0x7f,0x7f,
    0xbf,0x00,0x7f,0x7f,0xff,0x00,0x7f,0xbf,0x00,0x00,0x7f,0xbf,0x7f,0x00,0x7f,0xbf,
    0xbf,0x00,0x7f,0xbf,0xff,0x00,0x7f,0xff,0x00,0x00,0x7f,0xff,0x7f,0x00,0x7f,0xff,
    0xbf,0x00,0x7f,0xff,0xff,0x00,0xbf,0x00,0x00,0x00,0xbf,0x00,0x7f,0x00,0xbf,0x00,
    0xbf,0x00,0xbf,0x00,0xff,0x00,0xbf,0x7f,0x00,0x00,0xbf,0x7f,0x7f,0x00,0xbf,0x7f,
    0xbf,0x00,0xbf,0x7f,0xff,0x00,0xbf,0xbf,0x00,0x00,0xbf,0xbf,0x7f,0x00,0xbf,0xbf,
    0xbf,0x00,0xbf,0xbf,0xff,0x00,0xbf,0xff,0x00,0x00,0xbf,0xff,0x7f,0x00,0xbf,0xff,
    0xbf,0x00,0xbf,0xff,0xff,0x00,0xff,0x00,0x00,0x00,0xff,0x00,0x7f,0x00,0xff,0x00,
    0xbf,0x00,0xff,0x00,0xff,0x00,0xff,0x7f,0x00,0x00,0xff,0x7f,0x7f,0x00,0xff,0x7f,
    0xbf,0x00,0xff,0x7f,0xff,0x00,0xff,0xbf,0x00,0x00,0xff,0xbf,0x7f,0x00,0xff,0xbf,
    0xbf,0x00,0xff,0xbf,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x7f,0x00,0xff,0xff,
    0xbf,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x00,0x00,0x00,
    0xbf,0x00,0x00,0x00,0xff,0x00,0x00,0x7f,0x00,0x00,0x00,0x7f,0x7f,0x00,0x00,0x7f,
    0xbf,0x00,0x00,0x7f,0xff,0x00,0x00,0xbf,0x00,0x00,0x00,0xbf,0x7f,0x00,0x00,0xbf,
    0xbf,0x00,0x00,0xbf,0xff,0x00,0x00,0xff,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0xff,
    0xbf,0x00,0x00,0xff,0xff,0x00,0x7f,0x00,0x00,0x00,0x7f,0x00,0x7f,0x00,0x7f,0x00,
    0xbf,0x00,0x7f,0x00,0xff,0x00,0x7f,0x7f,0x00,0x00,0x7f,0x7f,0x7f,0x00,0x7f,0x7f,
    0xbf,0x00,0x7f,0x7f,0xff,0x00,0x7f,0xbf,0x00,0x00,0x7f,0xbf,0x7f,0x00,0x7f,0xbf,
    0xbf,0x00,0x7f,0xbf,0xff,0x00,0x7f,0xff,0x00,0x00,0x7f,0xff,0x7f,0x00,0x7f,0xff,
    0xbf,0x00,0x7f,0xff,0xff,0x00,0xbf,0x00,0x00,0x00,0xbf,0x00,0x7f,0x00,0xbf,0x00,
    0xbf,0x00,0xbf,0x00,0xff,0x00,0xbf,0x7f,0x00,0x00,0xbf,0x7f,0x7f,0x00,0xbf,0x7f,
    0xbf,0x00,0xbf,0x7f,0xff,0x00,0xbf,0xbf,0x00,0x00,0xbf,0xbf,0x7f,0x00,0xbf,0xbf,
    0xbf,0x00,0xbf,0xbf,0xff,0x00,0xbf,0xff,0x00,0x00,0xbf,0xff,0x7f,0x00,0xbf,0xff,
    0xbf,0x00,0xbf,0xff,0xff,0x00,0xff,0x00,0x00,0x00,0xff,0x00,0x7f,0x00,0xff,0x00,
    0xbf,0x00,0xff,0x00,0xff,0x00,0xff,0x7f,0x00,0x00,0xff,0x7f,0x7f,0x00,0xff,0x7f,
    0xbf,0x00,0xff,0x7f,0xff,0x00,0xff,0xbf,0x00,0x00,0xff,0xbf,0x7f,0x00,0xff,0xbf,
    0xbf,0x00,0xff,0xbf,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x7f,0x00,0xff,0xff,
    0xbf,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x00,0x00,0x00,
    0xbf,0x00,0x00,0x00,0xff,0x00,0x00,0x7f,0x00,0x00,0x00,0x7f,0x7f,0x00,0x00,0x7f,
    0xbf,0x00,0x00,0x7f,0xff,0x00,0x00,0xbf,0x00,0x00,0x00,0xbf,0x7f,0x00,0x00,0xbf,
    0xbf,0x00,0x00,0xbf,0xff,0x00,0x00,0xff,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0xff,
    0xbf,0x00,0x00,0xff,0xff,0x00,0x7f,0x00,0x00,0x00,0x7f,0x00,0x7f,0x00,0x7f,0x00,
    0xbf,0x00,0x7f,0x00,0xff,0x00,0x7f,0x7f,0x00,0x00,0x7f,0x7f,0x7f,0x00,0x7f,0x7f,
    0xbf,0x00,0x7f,0x7f,0xff,0x00,0x7f,0xbf,0x00,0x00,0x7f,0xbf,0x7f,0x00,0x7f,0xbf,
    0xbf,0x00,0x7f,0xbf,0xff,0x00,0x7f,0xff,0x00,0x00,0x7f,0xff,0x7f,0x00,0x7f,0xff,
    0xbf,0x00,0x7f,0xff,0xff,0x00,0xbf,0x00,0x00,0x00,0xbf,0x00,0x7f,0x00,0xbf,0x00,
    0xbf,0x00,0xbf,0x00,0xff,0x00,0xbf,0x7f,0x00,0x00,0xbf,0x7f,0x7f,0x00,0xbf,0x7f,
    0xbf,0x00,0xbf,0x7f,0xff,0x00,0xbf,0xbf,0x00,0x00,0xbf,0xbf,0x7f,0x00,0xbf,0xbf,
    0xbf,0x00,0xbf,0xbf,0xff,0x00,0xbf,0xff,0x00,0x00,0xbf,0xff,0x7f,0x00,0xbf,0xff,
    0xbf,0x00,0xbf,0xff,0xff,0x00,0xff,0x00,0x00,0x00,0xff,0x00,0x7f,0x00,0xff,0x00,
    0xbf,0x00,0xff,0x00,0xff,0x00,0xff,0x7f,0x00,0x00,0xff,0x7f,0x7f,0x00,0xff,0x7f,
    0xbf,0x00,0xff,0x7f,0xff,0x00,0xff,0xbf,0x00,0x00,0xff,0xbf,0x7f,0x00,0xff,0xbf,
    0xbf,0x00,0xff,0xbf,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x7f,0x00,0xff,0xff,
    0xbf,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x00,0x00,0x00,
    0xbf,0x00,0x00,0x00,0xff,0x00,0x00,0x7f,0x00,0x00,0x00,0x7f,0x7f,0x00,0x00,0x7f,
    0xbf,0x00,0x00,0x7f,0xff,0x00,0x00,0xbf,0x00,0x00,0x00,0xbf,0x7f,0x00,0x00,0xbf,
    0xbf,0x00,0x00,0xbf,0xff,0x00,0x00,0xff,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0xff,
    0xbf,0x00,0x00,0xff,0xff,0x00,0x7f,0x00,0x00,0x00,0x7f,0x00,0x7f,0x00,0x7f,0x00,
    0xbf,0x00,0x7f,0x00,0xff,0x00,0x7f,0x7f,0x00,0x00,0x7f,0x7f,0x7f,0x00,0x7f,0x7f,
    0xbf,0x00,0x7f,0x7f,0xff,0x00,0x7f,0xbf,0x00,0x00,0x7f,0xbf,0x7f,0x00,0x7f,0xbf,
    0xbf,0x00,0x7f,0xbf,0xff,0x00,0x7f,0xff,0x00,0x00,0x7f,0xff,0x7f,0x00,0x7f,0xff,
    0xbf,0x00,0x7f,0xff,0xff,0x00,0xbf,0x00,0x00,0x00,0xbf,0x00,0x7f,0x00,0xbf,0x00,
    0xbf,0x00,0xbf,0x00,0xff,0x00,0xbf,0x7f,0x00,0x00,0xbf,0x7f,0x7f,0x00,0xbf,0x7f,
    0xbf,0x00,0xbf,0x7f,0xff,0x00,0xbf,0xbf,0x00,0x00,0xbf,0xbf,0x7f,0x00,0xbf,0xbf,
    0xbf,0x00,0xbf,0xbf,0xff,0x00,0xbf,0xff,0x00,0x00,0xbf,0xff,0x7f,0x00,0xbf,0xff,
    0xbf,0x00,0xbf,0xff,0xff,0x00,0xff,0x00,0x00,0x00,0xff,0x00,0x7f,0x00,0xff,0x00,
    0xbf,0x00,0xff,0x00,0xff,0x00,0xff,0x7f,0x00,0x00,0xff,0x7f,0x7f,0x00,0xff,0x7f,
    0xbf,0x00,0xff,0x7f,0xff,0x00,0xff,0xbf,0x00,0x00,0xff,0xbf,0x7f,0x00,0xff,0xbf,
    0xbf,0x00,0xff,0xbf,0xff,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x7f,0x00,0xff,0xff,
    0xbf,0x00,0xff,0xff,0xff,0x00
};

static void injectSizeValuesInHeader(int w, int h)
{
    uint32_t* biWidth     = (uint32_t*)(&bmp_header[0x12]);
    uint32_t* biHeight    = (uint32_t*)(&bmp_header[0x16]);
    uint32_t* biSizeImage = (uint32_t*)(&bmp_header[0x22]);
    *biWidth = w;
    *biHeight = h;
    *biSizeImage = w * h;
}

// void CaptureBMP::capture(const char* filename)
void CaptureBMP::capture()
{

    static char filename[] = "BMP00000.bmp";

    // framebuffer size
    int w = VIDEO::vga.xres;
    int h = VIDEO::vga.yres;

    // number of uint32_t words
    int count = w / 4;

    // allocate line  buffer
    uint32_t *linebuf = new uint32_t[count];
    if (NULL == linebuf) {
        printf("CaptureBMP: unable to allocate line buffer\n");
        return;
    }

    // Get next filename (BMP + 5 digits, 0 padded sequential)
    string filelist;
    string scrdir = (string) MOUNT_POINT_SD + DISK_SCR_DIR;

    DIR* dir = opendir(scrdir.c_str());

    if (dir == NULL) {
        printf("CaptureBMP: problem accessing SCR dir\n");
        return;
    }

    int bmpnumber = 0;
    struct dirent* de = readdir(dir);
    if (de) {
        while (true) {
            string fname = de->d_name;
            if ((fname.substr(0,3) == "BMP") && (fname.substr(8,4) == ".bmp")) {
                int fnum = stoi(fname.substr(3,5));
                if (fnum > bmpnumber) bmpnumber = fnum;
            }
            de = readdir(dir);
            if (!de) break;
        }
    }
    closedir(dir);

    bmpnumber++;

    printf("BMP number -> %.5d\n",bmpnumber);

    sprintf((char *)filename,"BMP%.5d.bmp",bmpnumber);    
        
    // Full filename. Save only to SD.
    std::string fullfn = (string) MOUNT_POINT_SD + DISK_SCR_DIR + "/" + filename;

    // open file for writing
    FILE* pf = fopen(fullfn.c_str(), "w");
    if (NULL == pf) {
        delete[] linebuf;
        printf("CaptureBMP: unable to open file %s for writing\n", fullfn.c_str());
        return;
    }

    printf("CaptureBMP: capturing %d x %d to %s...\n", w, h, fullfn.c_str());

    // put width, height and size values in header
    injectSizeValuesInHeader(w, h);

    // write header
    fwrite(bmp_header, BMP_HEADER_SIZE, 1, pf);

    // process every scanline in reverse order (BMP is topdown)
    for (int y = h - 1; y >= 0; y--) {
        uint32_t* src = (uint32_t*)VIDEO::vga.backBuffer[y];
        uint32_t* dst = linebuf;
        // process every uint32 in scanline
        for (int i = 0; i < count; i++) {
            uint32_t srcval = *src++;
            uint32_t dstval = 0;
            // swap every uint32
            dstval |= ((srcval & 0xFFFF0000) >> 16);
            dstval |= ((srcval & 0x0000FFFF) << 16);
            *dst++ = dstval;
        }
        // write line to file
        fwrite(linebuf, sizeof(uint32_t), count, pf);
    }

    // cleanup
    fclose(pf);
    delete[] linebuf;

    printf("CaptureBMP: done\n");
}

// Reference
//
// BITMAPFILEHEADER: 14 bytes
// typedef struct tagBITMAPFILEHEADER {
//   WORD  bfType;
//   DWORD bfSize;
//   WORD  bfReserved1;
//   WORD  bfReserved2;
//   DWORD bfOffBits;
// }
//
// BITMAPINFOHEADER: 40 bytes
// typedef struct tagBITMAPINFOHEADER {
//   DWORD biSize;
//   LONG  biWidth;
//   LONG  biHeight;
//   WORD  biPlanes;
//   WORD  biBitCount;
//   DWORD biCompression;
//   DWORD biSizeImage;
//   LONG  biXPelsPerMeter;
//   LONG  biYPelsPerMeter;
//   DWORD biClrUsed;
//   DWORD biClrImportant;
// }
